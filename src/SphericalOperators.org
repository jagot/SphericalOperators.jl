#+TITLE: Coupling Operators in Spherical Symmetry
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

#+PROPERTY: header-args:julia :session *julia-spherical-symmetry* :eval no-export

* COMMENT Setup
  #+BEGIN_SRC julia
    using Pkg
    Pkg.activate(".")
    using Test
  #+END_SRC

  #+RESULTS:
  : nothing

* Introduction
  The interaction in both the length gauge and the velocity gauge
  has this common form:
  \begin{subequations}
  \begin{align}
  \op{V}_{\textrm{l}}(t) &= q\vec{E}(t)\cdot\vec{M}\{r,r\} = q\vec{E}(t)\cdot\vec{M}\{1,1\}r,\\
  \op{V}_{\textrm{v}}(t) &=
  -\im q\vec{A}(t)\cdot\vec{M}\{
  \partial_r - \ell r^{-1},
  \partial_r + (\ell+1) r^{-1}
  \}\\
  &=
  -\im q\vec{A}(t)\cdot\vec{M}\{-\ell,\ell+1\}r^{-1}
  -\im q\vec{A}(t)\cdot\vec{M}\{1,1\}\partial_r\nonumber\\
  &\defd
  \op{V}_{\textrm{v}}^{(1)}(t)+
  \op{V}_{\textrm{v}}^{(2)}(t),\nonumber
  \end{align}
  \end{subequations}
  \begin{equation}
  \begin{aligned}
  \label{eqn:dipole-angular-structure}
  \vec{M}\{\mathfrak{a},\mathfrak{b}\}
  &\defd
  \bmat{
  \zeta(\mathfrak{a},\mathfrak{b})&
  \xi(\mathfrak{a},\mathfrak{b})&
  \upsilon(\mathfrak{a},\mathfrak{b})
  }^\top\\
  \implies
  \vec{A}\cdot\vec{M}\{\mathfrak{a},\mathfrak{b}\}
  &\equiv
  A_z\zeta(\mathfrak{a},\mathfrak{b})+
  A_x\xi(\mathfrak{a},\mathfrak{b})+
  A_y\upsilon(\mathfrak{a},\mathfrak{b})
  \end{aligned}
  \end{equation}
  \begin{subequations}
  \begin{align}
  \zeta(\mathfrak{a},\mathfrak{b}) \defd&
  +c^{\ell}_{m}
  &&\mathfrak{a}
  &\ketbra{\ell+1,m}{\ell, m}&\\
  &+c^{\ell-1}_{m}
  &&\mathfrak{b}
  &\ketbra{\ell-1,m}{\ell, m}&\nonumber\\\nonumber\\
  2\xi(\mathfrak{a},\mathfrak{b}) \defd&
  +b^\ell_m
  &&\mathfrak{a}
  &\ketbra{\ell+1,m+1}{\ell, m}&\\
  &-b^{\ell-1}_{-m-1}
  &&\mathfrak{b}
  &\ketbra{\ell-1,m+1}{\ell, m}&\nonumber\\
  &
  -b^\ell_{-m}
  &&\mathfrak{a}
  &\ketbra{\ell+1,m-1}{\ell, m}&\nonumber\\
  &+b^{\ell-1}_{m-1}
  &&\mathfrak{b}
  &\ketbra{\ell-1,m-1}{\ell, m}&,\nonumber
  \end{align}
  \end{subequations}
  where the angular coupling coefficients are
  \begin{equation}
  c^{\ell}_{m}\defd
  \left[
  \frac{(\ell+m+1)(\ell-m+1)}{(2\ell+3)(2\ell+1)}
  \right]^{1/2},
  \qquad
  b^{\ell}_{m}\defd
  \left[
  \frac{(\ell+m+2)(\ell+m+1)}{(2\ell+3)(2\ell+1)}
  \right]^{1/2}.
  \end{equation}


  \(\upsilon\) corresponds to polarization along \(y\),
  i.e. longitudinal polarization, which we do not consider.
* Spherical Basis
  #+BEGIN_SRC julia
    using Printf
    import Base: size

    abstract type AbstractSphericalBasis end

    size(L::AbstractSphericalBasis,i::Integer) = size(L)[i]

    struct SphericalBasis2d <: AbstractSphericalBasis
        ℓₘᵢₙ::Integer
        ℓₘₐₓ::Integer
        nᵣ::Integer
        m::Integer
        function SphericalBasis2d(ℓₘₐₓ::Integer, nᵣ::Integer; m::Integer=0, ℓₘᵢₙ::Integer=m)
            @assert ℓₘᵢₙ ≥ 0
            @assert ℓₘₐₓ ≥ ℓₘᵢₙ
            @assert abs(m) ≤ ℓₘₐₓ
            @assert nᵣ > 0
            # If m is conserved, there is no way of reaching an ℓ <
            # abs(m). We therefore truncate the basis.
            if ℓₘᵢₙ < abs(m)
                ℓₘᵢₙ = abs(m)
                @printf("Warning: ℓₘᵢₙ = %i is not reachable when starting in m = %i, when m is conserved. Truncating.\n",
                        ℓₘᵢₙ, m)
            end
            new(ℓₘᵢₙ, ℓₘₐₓ, nᵣ, m)
        end
    end

    """
        nopws(L[, ℓ=L.ℓₘₐₓ])

    Returns how many partial waves ∈ [L.ℓₘᵢₙ,ℓ] are present in L.
    """
    nopws(L::SphericalBasis2d, ℓ::Integer=L.ℓₘₐₓ) = ℓ - L.ℓₘᵢₙ + 1

    struct SphericalBasis3d <: AbstractSphericalBasis
        ℓₘᵢₙ::Integer
        ℓₘₐₓ::Integer
        mₘₐₓ::Integer
        nᵣ::Integer
        function SphericalBasis3d(ℓₘₐₓ::Integer, nᵣ::Integer; ℓₘᵢₙ::Integer=0, mₘₐₓ::Integer=ℓₘₐₓ)
            @assert ℓₘᵢₙ ≥ 0
            @assert ℓₘₐₓ ≥ ℓₘᵢₙ
            @assert mₘₐₓ ∈ 0:ℓₘₐₓ
            @assert nᵣ > 0
            new(ℓₘᵢₙ, ℓₘₐₓ, mₘₐₓ, nᵣ)
        end
    end

    function nopws(L::SphericalBasis3d, ℓ::Integer=L.ℓₘₐₓ)
        if ℓ > L.mₘₐₓ
            nopws(L, L.mₘₐₓ) + (ℓ-L.mₘₐₓ)*(2L.mₘₐₓ+1)
        else
            (ℓ+1)^2 - L.ℓₘᵢₙ^2
        end
    end

    size(L::AbstractSphericalBasis) = (nopws(L,L.ℓₘₐₓ),L.nᵣ)

    export AbstractSphericalBasis, SphericalBasis2d, SphericalBasis3d, nopws
  #+END_SRC

  #+RESULTS:
  : nothing
*** TEST Creating spherical bases
    #+BEGIN_SRC julia
      L2d = SphericalBasis2d(10,100)
      L2dtrunc = SphericalBasis2d(10,100,ℓₘᵢₙ=8,m=1)
      L2dtrunc2 = SphericalBasis2d(10,100,m=7)
      L3d = SphericalBasis3d(10,100)
      L3dtruncm = SphericalBasis3d(10,100,mₘₐₓ=4)

      @test size(L2d,1) == 11
      @test size(L3d,1) == 121
      @test size(L2d,2) == 100
      @test size(L3d,2) == 100
      @test size(L2dtrunc2,1) == 4
      @test size(L3dtruncm,1) == 25+54
      nothing
    #+END_SRC

    #+RESULTS:
    : nothing
**** TEST Assert sensible input
     #+BEGIN_SRC julia
       @test_throws AssertionError SphericalBasis2d(0, 10; ℓₘᵢₙ=-3)
       @test_throws AssertionError SphericalBasis2d(-1, 10)
       @test_throws AssertionError SphericalBasis2d(1, 10; ℓₘᵢₙ=2)
       @test_throws AssertionError SphericalBasis2d(1, 10; m=2)
       @test_throws AssertionError SphericalBasis2d(1, -10)

       @test_throws AssertionError SphericalBasis3d(0, 10; ℓₘᵢₙ=-3)
       @test_throws AssertionError SphericalBasis3d(-1, 10)
       @test_throws AssertionError SphericalBasis3d(1, 10; ℓₘᵢₙ=2)
       @test_throws AssertionError SphericalBasis3d(1, -10)
       @test_throws AssertionError SphericalBasis3d(3, 10; mₘₐₓ=-1)
       @test_throws AssertionError SphericalBasis3d(3, 10; mₘₐₓ=4)

       nothing
     #+END_SRC

     #+RESULTS:
     : nothing

** Iterators over channels
   #+BEGIN_SRC julia
     eachℓ(L::SB) where {SB<:AbstractSphericalBasis} = L.ℓₘᵢₙ:L.ℓₘₐₓ
     enumerateℓ(L::SB) where {SB<:AbstractSphericalBasis} = enumerate(eachℓ(L))

     # No check is made that ℓ ∈ 0:ℓₘₐₓ, for performance reasons
     eachm(L::SphericalBasis2d, ℓ::Integer) = L.m:L.m
     function eachm(L::SphericalBasis3d, ℓ::Integer)
         mₘₐₓ = min(ℓ,L.mₘₐₓ)
         -mₘₐₓ:mₘₐₓ
     end
     enumeratem(L::SB, ℓ::Integer) where {SB<:AbstractSphericalBasis} = enumerate(eachm(L, ℓ))

     # Since this function does not return lazy iterators, it may very well
     # be slow and inefficient.
     function eachℓm(L::SB) where {SB<:AbstractSphericalBasis}
         map(eachℓ(L)) do ℓ
             map(eachm(L, ℓ)) do m
                 ℓ,m
             end
         end |> v -> reduce(vcat,v)
     end
     enumerateℓm(L::SB) where {SB<:AbstractSphericalBasis} = enumerate(eachℓm(L))

     export eachℓ, enumerateℓ,
         eachm, enumeratem,
         eachℓm, enumerateℓm
   #+END_SRC

   #+RESULTS:
   : nothing
*** TEST Iterating over spherical bases
    #+BEGIN_SRC julia
      L2d = SphericalBasis2d(10,100)
      L2dtrunc = SphericalBasis2d(10,100,ℓₘᵢₙ=8,m=1)
      L2dtrunc2 = SphericalBasis2d(10,100,m=7)
      L3d = SphericalBasis3d(10,100)
      L3dtruncm = SphericalBasis3d(10,100,mₘₐₓ=4)

      for ℓ ∈ 0:4
          @test eachm(L3dtruncm, ℓ) == -ℓ:ℓ
      end
      for ℓ ∈ 5:10
          @test eachm(L3dtruncm, ℓ) == -4:4
      end

      @test last.(enumerateℓ(L2d)) == 0:10
      @test last.(enumeratem(L2d, 3)) == 0:0
      @test last.(enumeratem(L3d, 3)) == -3:3
      @test last.(enumerateℓ(L2dtrunc)) == 8:10
      @test last.(enumeratem(L2dtrunc, 3)) == 1:1

      eL2d = enumerateℓm(L2d)
      eL3d = enumerateℓm(L3d)

      @test last(collect(eL2d))[end] == (10,0)
      @test last(collect(eL3d))[end] == (10,10)

      @test first.(eL2d) == 1:11
      @test first.(eL3d) == 1:121

      nothing
    #+END_SRC

    #+RESULTS:
    : nothing

** Pretty printing
   #+BEGIN_SRC julia
     spectroscopic = "spdfghiklmnoqrtuv"
     spectroscopic_label(ℓ) =
         ℓ + 1 ≤ length(spectroscopic) ? spectroscopic[ℓ+1] : "$(ℓ)"

     function Base.show(io::IO, L::SphericalBasis2d)
         ℓₘᵢₙ = spectroscopic_label(L.ℓₘᵢₙ)
         ℓₘₐₓ = spectroscopic_label(L.ℓₘₐₓ)
         nℓ = L.ℓₘₐₓ - L.ℓₘᵢₙ + 1

         print("SphericalBasis2d(ℓ ∈ $(ℓₘᵢₙ):$(ℓₘₐₓ) = $(nℓ) channels")
         if L.m != 0
             print(", m = $(L.m)")
         end
         print(", nᵣ = $(L.nᵣ))")
     end

     function Base.show(io::IO, L::SphericalBasis3d)
         ℓₘᵢₙ = spectroscopic_label(L.ℓₘᵢₙ)
         ℓₘₐₓ = spectroscopic_label(L.ℓₘₐₓ)
         nℓ = L.ℓₘₐₓ - L.ℓₘᵢₙ + 1

         print("SphericalBasis3d(ℓ ∈ $(ℓₘᵢₙ):$(ℓₘₐₓ) = $(nℓ) channels")
         if L.mₘₐₓ < L.ℓₘₐₓ
             print(", mₘₐₓ = $(L.mₘₐₓ)")
         end
         print(" = $(nopws(L)) partial waves")
         print(", nᵣ = $(L.nᵣ))")
     end

     print_formatted(fmt, args...) = @eval @printf($fmt, $(args...))

     function visualize(L::SphericalBasis2d)
         ns = length(spectroscopic_label(L.ℓₘₐₓ))
         for ℓ ∈ eachℓ(L)
             print_formatted("%$(ns)s .\n", spectroscopic_label(ℓ))
         end
     end

     function visualize(L::SphericalBasis3d)
         ns = length(spectroscopic_label(L.ℓₘₐₓ))
         for ℓ ∈ eachℓ(L)
             print_formatted("%$(ns)s ", spectroscopic_label(ℓ))
             mₘₐₓ = min(ℓ,L.mₘₐₓ)
             for m ∈ -L.mₘₐₓ:-mₘₐₓ-1
                 print(" ")
             end
             for m ∈ -mₘₐₓ:mₘₐₓ
                 print(".")
             end
             println()
         end
     end

     export visualize
   #+END_SRC

   #+RESULTS:
   : nothing
*** EXAMPLE Visualization
    #+BEGIN_SRC julia :exports both :results output
      for L ∈ [SphericalBasis2d(10,100),
               SphericalBasis2d(10,100,ℓₘᵢₙ=8,m=1),
               SphericalBasis2d(10,100,m=7),
               SphericalBasis3d(10,100),
               SphericalBasis3d(10,100,mₘₐₓ=4),
               SphericalBasis3d(10,100,ℓₘᵢₙ=2,mₘₐₓ=4)]
          println(L)
          visualize(L)
          println()
      end
    #+END_SRC

    #+RESULTS:
    #+begin_example
    SphericalBasis2d(ℓ ∈ s:n = 11 channels, nᵣ = 100)
    s .
    p .
    d .
    f .
    g .
    h .
    i .
    k .
    l .
    m .
    n .

    SphericalBasis2d(ℓ ∈ l:n = 3 channels, m = 1, nᵣ = 100)
    l .
    m .
    n .

    SphericalBasis2d(ℓ ∈ k:n = 4 channels, m = 7, nᵣ = 100)
    k .
    l .
    m .
    n .

    SphericalBasis2d(ℓ ∈ s:n = 11 channels = 121 partial waves, nᵣ = 100)
    s           .
    p          ...
    d         .....
    f        .......
    g       .........
    h      ...........
    i     .............
    k    ...............
    l   .................
    m  ...................
    n .....................

    SphericalBasis2d(ℓ ∈ s:n = 11 channels, mₘₐₓ = 4 = 79 partial waves, nᵣ = 100)
    s     .
    p    ...
    d   .....
    f  .......
    g .........
    h .........
    i .........
    k .........
    l .........
    m .........
    n .........

    SphericalBasis2d(ℓ ∈ d:n = 9 channels, mₘₐₓ = 4 = 75 partial waves, nᵣ = 100)
    d   .....
    f  .......
    g .........
    h .........
    i .........
    k .........
    l .........
    m .........
    n .........
    #+end_example

* Orderings
  #+BEGIN_SRC julia
    abstract type Ordering end
    struct LexicalOrdering <: Ordering end

    # Lexical ordering for the 2d case
    ord(L::SphericalBasis2d,::Type{LexicalOrdering},ℓ,r) = nopws(L,ℓ-1)*L.nᵣ .+ r
    ord(L::SphericalBasis2d,::Type{LexicalOrdering},ℓ,m,r) = nopws(L,ℓ-1)*L.nᵣ .+ r

    # Lexical ordering for the 3d case
    ord(L::SphericalBasis3d,::Type{LexicalOrdering},ℓ,m,r) = (nopws(L,ℓ-1) + min(ℓ,L.mₘₐₓ) + m)*L.nᵣ .+ r
  #+END_SRC

  #+RESULTS:
  : ord (generic function with 2 methods)

** TEST Lexical ordering
   #+BEGIN_SRC julia
     import SphericalOperators: ord, LexicalOrdering

     L2d = SphericalBasis2d(10,100)
     @test ord(L2d, LexicalOrdering, 0, 3:5) == 3:5
     @test ord(L2d, LexicalOrdering, 5, 3:5) == 503:505

     L2dtrunc = SphericalBasis2d(10,100,ℓₘᵢₙ=8,m=1)
     @test ord(L2dtrunc, LexicalOrdering, 8, 3:5) == 3:5
     @test ord(L2dtrunc, LexicalOrdering, 9, 3:5) == 103:105

     L2dtrunc2 = SphericalBasis2d(10,100,m=7)
     @test ord(L2dtrunc2, LexicalOrdering, 8, 3:5) == 103:105
     @test ord(L2dtrunc2, LexicalOrdering, 9, 3:5) == 203:205

     L3d = SphericalBasis3d(10,100)
     for (ℓ,m) ∈ eachℓm(L3d)
         @test ord(L3d, LexicalOrdering, ℓ, m, 3:5) == (ℓ^2 + ℓ + m)*L3d.nᵣ .+ (3:5)
     end

     L3dtruncm = SphericalBasis3d(10,100,mₘₐₓ=4)
     for ℓ ∈ 0:4
         for m ∈ eachm(L3dtruncm, ℓ)
             @test ord(L3dtruncm, LexicalOrdering, ℓ, m, 3:5) == (ℓ^2 + ℓ + m)*L3dtruncm.nᵣ .+ (3:5)
         end
     end
     for ℓ ∈ 5:L3dtruncm.ℓₘₐₓ
         for m ∈ eachm(L3dtruncm, ℓ)
             @test ord(L3dtruncm, LexicalOrdering, ℓ, m, 3:5) == (5^2 + 9*(ℓ - 5) + 4 + m)*L3dtruncm.nᵣ .+ (3:5)
         end
     end

     L3dtruncℓm = SphericalBasis3d(10,100,ℓₘᵢₙ=3,mₘₐₓ=4)
     for ℓ ∈ 3:4
         for m ∈ eachm(L3dtruncℓm, ℓ)
             @test ord(L3dtruncℓm, LexicalOrdering, ℓ, m, 3:5) == (ℓ^2 - 9 + ℓ + m)*L3dtruncℓm.nᵣ .+ (3:5)
         end
     end
     for ℓ ∈ 5:L3dtruncℓm.ℓₘₐₓ
         for m ∈ eachm(L3dtruncℓm, ℓ)
             @test ord(L3dtruncℓm, LexicalOrdering, ℓ, m, 3:5) == (5^2 + 9*(ℓ - 5) - 9 + 4 + m)*L3dtruncℓm.nᵣ .+ (3:5)
         end
     end
   #+END_SRC

   #+RESULTS:
   : nothing

* Spherical Tensors
** COMMENT General coupling coefficients
   #+BEGIN_SRC julia
     using WignerSymbols

     function C(k, ℓ, ℓ′, q=0, m=0, m′=0)
         s = (-1)^(2ℓ-m)
         N = √((2ℓ+1)*(2ℓ′+1))
         W = wigner3j(ℓ, k, ℓ′,
                      -m, q, m′)
         Wr = wigner3j(ℓ, k, ℓ′,
                       0, 0, 0)
         s*N*W*Wr
     end
   #+END_SRC

   #+RESULTS:
   : C (generic function with 4 methods)

** Coupling coefficients for dipole operators
   #+BEGIN_SRC julia
     c(ℓ,m) = √((ℓ+m+1)*(ℓ-m+1)/((2ℓ+3)*(2ℓ+1)))
     b(ℓ,m) = √((ℓ+m+2)*(ℓ+m+1)/((2ℓ+3)*(2ℓ+1)))
   #+END_SRC

   #+RESULTS:
   : b (generic function with 1 method)

* Dipole Operators
** Dipole Stencils
   #+BEGIN_SRC julia
     abstract type MultipoleStencil end

     struct DipoleStencil <: MultipoleStencil
         exprs::Vector{Pair{Tuple, Function}}
     end
   #+END_SRC

   #+RESULTS:
   : nothing

   #+BEGIN_SRC julia
     macro dipole_stencil(exprs, name)
         # Turn the DSL statements into Expr:s that can be eval:ed later in
         # the context of the materialize! arguments.
         ds = map(filter(e -> typeof(e) == Expr, exprs.args[2].args)) do e
             coords = eval(e.args[1])
             expr = e.args[2]
             coords => eval(Expr(:(->), :(ℓ, m, 𝔞, 𝔟), expr))
         end |> DipoleStencil
         quote
             $(esc(name)) = $ds
         end
     end
   #+END_SRC

   #+RESULTS:
   : @dipole_stencil (macro with 1 method)

*** \(\zeta\)
    #+BEGIN_SRC julia :results verbatim
      @dipole_stencil(ζ) do
          (+1,0) -> c(ℓ,m)*𝔞(ℓ)
          (-1,0) -> c(ℓ-1,m)*𝔟(ℓ)
      end
      nothing
    #+END_SRC

    #+RESULTS:
    : nothing

*** \(\xi\)
    #+BEGIN_SRC julia :results verbatim
      @dipole_stencil(ξ) do
          (+1,+1) -> b(ℓ,m)*𝔞(ℓ)/2
          (-1,+1) -> -b(ℓ-1,-m-1)*𝔟(ℓ)/2
          (+1,-1) -> -b(ℓ,-m)*𝔞(ℓ)/2
          (-1,-1) -> b(ℓ-1,m-1)*𝔟(ℓ)/2
      end
      nothing
    #+END_SRC

    #+RESULTS:
    : nothing

**** \(\xi^+\)
     #+BEGIN_SRC julia :results verbatim
       @dipole_stencil(ξ⁺) do
           (+1,+1) -> b(ℓ,m)*𝔞(ℓ)/2
           (-1,-1) -> b(ℓ-1,m-1)*𝔟(ℓ)/2
       end
       nothing
     #+END_SRC

     #+RESULTS:
     : nothing

**** \(\xi^-\)
     #+BEGIN_SRC julia :results verbatim
       @dipole_stencil(ξ⁻) do
           (-1,+1) -> -b(ℓ-1,-m-1)*𝔟(ℓ)/2
           (+1,-1) -> -b(ℓ,-m)*𝔞(ℓ)/2
       end
       nothing
     #+END_SRC

     #+RESULTS:
     : nothing

** Materialize stencils
   #+BEGIN_SRC julia
     function materialize!(op, stencil::DipoleStencil, L::SphericalBasis2d,
                           𝔞::Function, 𝔟::Function,
                           ::Type{O} = LexicalOrdering) where {O<:Ordering}
         prod(size(op)) == prod(size(L))^2 || throw(DimensionMismatch("materialize!"))
         exprs = map(stencil.exprs) do (coords,expr)
             coords[2] != 0 && error("SphericalBasis2d cannot materialize operators that do not conserve m")
             coords => eval(expr)
         end
         op .= 0
         rsel = 1:L.nᵣ
         for ℓ in eachℓ(L)
             for (coords,e) in exprs
                 ℓ′ = ℓ+coords[1]
                 ℓ′ ∉ eachℓ(L) && continue
                 op[ord(L,O,ℓ,rsel),ord(L,O,ℓ′,rsel)] += e(ℓ,L.m,𝔞,𝔟)
             end
         end
         op
     end

     function materialize!(op, stencil::DipoleStencil, L::SphericalBasis3d,
                           𝔞::Function, 𝔟::Function,
                           ::Type{O} = LexicalOrdering) where {O<:Ordering}
         prod(size(op)) == prod(size(L))^2 || throw(DimensionMismatch("materialize!"))
         exprs = map(stencil.exprs) do (coords,expr)
             coords => eval(expr)
         end
         op .= 0
         rsel = 1:L.nᵣ
         for ℓ in eachℓ(L)
             for (coords,e) in exprs
                 ℓ′ = ℓ + coords[1]
                 ℓ′ ∉ eachℓ(L) && continue
                 for m in eachm(L,ℓ)
                     m′ = m + coords[2]
                     m′ ∉ eachm(L, ℓ′) && continue
                     op[ord(L,O,ℓ,m,rsel),ord(L,O,ℓ′,m′,rsel)] += e(ℓ,m,𝔞,𝔟)
                 end
             end
         end
         op
     end

     export materialize!
   #+END_SRC

   #+RESULTS:
   : nothing

*** TEST Materialization
    #+BEGIN_SRC julia
      using SparseArrays
      using LinearAlgebra

      ℓₘₐₓ = 5
      nᵣ = 10

      L2d = SphericalBasis2d(ℓₘₐₓ,nᵣ)
      L3d = SphericalBasis3d(ℓₘₐₓ,nᵣ)
      L3dtruncm = SphericalBasis3d(ℓₘₐₓ,nᵣ,mₘₐₓ=3)

      N2d = prod(size(L2d))
      N3d = prod(size(L3d))
      N3dtruncm = prod(size(L3dtruncm))

      z2d = spzeros(N2d,N2d);
      z3d = spzeros(N3d,N3d);
      x3d = spzeros(N3d,N3d);
      x⁺3d = spzeros(N3d,N3d);
      x⁻3d = spzeros(N3d,N3d);
      z3dtruncm = spzeros(N3dtruncm,N3dtruncm);
      x3dtruncm = spzeros(N3dtruncm,N3dtruncm);

      r = ℓ -> spdiagm(0 => ones(nᵣ))

      import SphericalOperators: ζ, ζ, ξ, ξ⁺, ξ⁻

      materialize!(z2d, ζ, L2d, r, r);
      materialize!(z3d, ζ, L3d, r, r);
      materialize!(x3d, ξ, L3d, r, r);
      materialize!(x⁺3d, ξ⁺, L3d, r, r);
      materialize!(x⁻3d, ξ⁻, L3d, r, r);
      materialize!(z3dtruncm, ζ, L3dtruncm, r, r);
      materialize!(x3dtruncm, ξ, L3dtruncm, r, r);

      @test_throws ErrorException materialize!(z2d, ξ, L2d, r, r)
      @test_throws DimensionMismatch materialize!(z2d, ζ, L3d, r, r)

      tmp2d = spzeros(N2d,N2d);
      tmp3d = spzeros(N3d,N3d);

      𝔞 = ℓ -> (ℓ+1)*I
      𝔟 = ℓ -> -ℓ*I

      materialize!(tmp2d, ζ, L2d, 𝔞, 𝔟);
      @test ishermitian(-im*tmp2d)

      materialize!(tmp3d, ζ, L3d, 𝔞, 𝔟);
      @test ishermitian(-im*tmp3d)
      materialize!(tmp3d, ξ, L3d, 𝔞, 𝔟);
      @test ishermitian(-im*tmp3d)
      materialize!(tmp3d, ξ, L3d, 𝔞, 𝔟);
      @test ishermitian(-im*tmp3d)
      materialize!(tmp3d, ξ, L3d, 𝔞, 𝔟);
      @test ishermitian(-im*tmp3d)

      nothing
    #+END_SRC

    #+RESULTS:
    : nothing

**** EXAMPLE Plot
     #+BEGIN_SRC julia
       using PyPlot
       figure("dip", figsize=(10,3))
       clf()
       subplot(231)
       spy(Array(z2d))
       margins(0,0)
       subplot(232)
       spy(Array(z3d))
       margins(0,0)
       subplot(234)
       spy(Array(x3d))
       margins(0,0)
       subplot(235)
       spy(Array(x⁺3d))
       margins(0,0)
       subplot(236)
       spy(Array(x⁻3d))
       margins(0,0)
       tight_layout()

       figure("trunc")
       clf()
       subplot(121)
       spy(Array(z3dtruncm))
       margins(0,0)
       subplot(122)
       spy(Array(x3dtruncm))
       margins(0,0)
       tight_layout()
     #+END_SRC

     #+RESULTS:
     : nothing

** Invariant sets
   Given a spherical basis and a dipole stencil, generate all
   invariant sets, i.e. those that can be exponentiated separately
   without considering the other partial waves.

   It is assumed that the stencil describes a Hermitian operator,
   i.e. if pw couples to pw′, the symmetric coupling element is
   assumed to be the conjugated value.
   #+BEGIN_SRC julia
     const Coupling = Pair{Tuple{Tuple{Integer,Integer},Tuple{Integer,Integer}},Real}
     function invariant_sets(L::AbstractSphericalBasis,
                             stencil::DipoleStencil,
                             𝔞::Function, 𝔟::Function)
         pws = eachℓm(L)
         sets = Vector{Coupling}[]
         exprs = map(stencil.exprs) do (coords,expr)
             L isa SphericalBasis2d && coords[2] != 0 && error("SphericalBasis2d cannot materialize operators that do not conserve m")
             coords => eval(expr)
         end
         function traversepws(set, pw)
             ℓ,m = pw
             for (coords,e) in exprs
                 ℓ′ = ℓ + coords[1]
                 m′ = m + coords[2]
                 pw′ = ℓ′,m′
                 i = findfirst(isequal(pw′), pws)
                 if i != nothing
                     v = e(ℓ,m,𝔞,𝔟)
                     v == 0 && continue
                     push!(set, (pw,pw′) => v)
                     deleteat!(pws, i)
                     traversepws(set, pw′)
                 end
             end
         end
         while !isempty(pws)
             pw = first(pws)
             deleteat!(pws, 1)
             set = Coupling[]
             traversepws(set, pw)
             !isempty(set) && push!(sets, set)
         end
         sets
     end

     export invariant_sets
   #+END_SRC

*** TEST Invariant sets
    #+BEGIN_SRC julia
      function test_is_invariant(sets)
          pws = first.(first.(sets))
          for i in eachindex(pws)
              other_pws = vcat([[pws[j]...] for j in vcat(1:i-1,i+1:length(sets))]...)
              @test isempty([pws[i]...] ∩ other_pws)
          end
      end

      function test_set_coverage(L::AbstractSphericalBasis, op::SphericalOperators.DipoleStencil, setss...)
          # Ensure that all partial waves in L coupled by op are present in
          # at least one of the invariant sets generated.
          coords = map(first, op.exprs)
          pws = filter(eachℓm(L)) do ℓm
              ℓ,m = ℓm
              map(coords) do co
                  ℓ′ = ℓ + co[1]
                  m′ = m + co[2]
                  ℓ′ ∈ eachℓ(L) && m′ ∈ eachm(L,ℓ′) && return true
                  false
              end |> any
          end
          set_pws = []
          for sets in setss
              for set in sets
                  append!(set_pws, vcat([[pw...] for pw in first.(first.(sets))]...))
              end
          end
          @test sort(pws) == sort(unique(set_pws))
      end

      L2d = SphericalBasis2d(5,1)

      # If no splitting is made, there is only one invariant set containing
      # all partial waves.
      sets = invariant_sets(L2d, SphericalOperators.ζ, ℓ -> 1, ℓ -> 1)
      @test length(sets) == 1
      @test length(sets[1]) == size(L2d,1)-1

      setse = invariant_sets(L2d, SphericalOperators.ζ, ℓ -> iseven(ℓ), ℓ -> isodd(ℓ))
      setso = invariant_sets(L2d, SphericalOperators.ζ, ℓ -> isodd(ℓ), ℓ -> iseven(ℓ))
      @test length(setse) + length(setso) == size(L2d,1)-1
      test_set_coverage(L2d, SphericalOperators.ζ, setse, setso)

      for set in setse
          @test length(set) == 1
      end
      test_is_invariant(setse)
      for set in setso
          @test length(set) == 1
      end
      test_is_invariant(setso)

      @test_throws ErrorException invariant_sets(L2d, SphericalOperators.ξ, ℓ -> 1, ℓ -> 1)
      @test_throws ErrorException invariant_sets(L2d, SphericalOperators.ξ⁺, ℓ -> 1, ℓ -> 1)
      @test_throws ErrorException invariant_sets(L2d, SphericalOperators.ξ⁻, ℓ -> 1, ℓ -> 1)

      L3d = SphericalBasis3d(5,1)

      for op in [SphericalOperators.ζ, SphericalOperators.ξ⁺, SphericalOperators.ξ⁻]
          setse = invariant_sets(L3d, op, ℓ -> iseven(ℓ), ℓ -> isodd(ℓ))
          setso = invariant_sets(L3d, op, ℓ -> isodd(ℓ), ℓ -> iseven(ℓ))
          # @test length(setse) + length(setso) == size(L3d,1)-1
          test_set_coverage(L3d, op, setse, setso)

          for set in setse
              @test length(set) == 1
          end
          test_is_invariant(setse)
          for set in setso
              @test length(set) == 1
          end
          test_is_invariant(setso)
      end
    #+END_SRC


* LaTeX config                                                     :noexport:
  #+LATEX_HEADER: \renewcommand{\vec}[1]{\mathbf{#1}}
  #+LATEX_HEADER: \renewcommand{\op}[1]{\mathcal{#1}}
  #+LATEX_HEADER: \renewcommand{\defd}{\overset{!}{=}}
